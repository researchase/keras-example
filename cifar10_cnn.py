# Original from https://github.com/fchollet/keras/tree/2.0.0/examples

#developed by Ashwin
#for valohai bot
#hope it works
from __future__ import print_function
import os
import shutil
import argparse
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.models import model_from_json
def use_valohai_input(): 
    dataset = numpy.loadtxt("pima-indians-diabetes.csv", delimiter=",")
    # split into input and output variables
    X = dataset[:,0:8]
    Y = dataset[:,8]

   

def train(params):
    batch_size = params.batch_size
    num_classes = params.num_classes
    epochs = params.epochs
    data_augmentation = params.data_augmentation

    # create model
    model = Sequential()
    model.add(Dense(12, input_dim=8, activation= ' relu ' ))
    model.add(Dense(8, activation= ' relu ' ))
    model.add(Dense(1, activation= ' sigmoid ' ))
    
    # Compile model
    model.compile(loss= ' binary_crossentropy ' , optimizer= ' adam ' , metrics=[ ' accuracy ' ])
        # Fit the model on the batches generated by datagen.flow().
    # Fit the model
    model.fit(X, Y, epochs=150, batch_size=10)
    # evaluate the model
    scores = model.evaluate(X, Y)
    print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
    outputs_dir = os.getenv('VH_OUTPUTS_DIR', './')
    output_file = os.path.join(outputs_dir, 'my_model.h5')
    print('Saving model to %s' % output_file)
    model.save(output_file)
if __name__ == '__main__':
    use_valohai_input()

    parser = argparse.ArgumentParser()
    parser.add_argument('--batch_size', type=int)
    parser.add_argument('--num_classes', type=int)
    parser.add_argument('--epochs', type=int)
    parser.add_argument('--data_augmentation', type=bool, nargs='?', const=True)
    cli_parameters, unparsed = parser.parse_known_args()
    train(cli_parameters)
